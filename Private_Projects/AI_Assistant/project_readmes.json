{
  "Into_Java_Lab3": "# Lab3 - Integer Statistics Program\n\nThis Java program prompts the user to enter a specified number of integers and then calculates:  \n- The **average value** of the entered numbers.  \n- The **count of unique integers** (numbers that appear only once).  \n- Input validation ensures only integers are accepted, preventing errors from invalid inputs.  \n\n### Features\n- Uses **ArrayLists** for dynamic storage of integers.\n- Implements **exception handling** to manage invalid user input.\n- Utilizes **nested loops** to determine unique values.\n\n### How It Works\n1. The user specifies how many integers they want to enter.\n2. The program collects valid integers, rejecting invalid inputs.\n3. It calculates and displays:\n   - The **average** of the entered numbers.\n   - The number of **unique integers** in the input.\n\n---\n**Note:** The program can be improved by optimizing the uniqueness check and enhancing error messages.\n\n---\n",
  "Into_Java_Lab4": "# Lab4 - Swedish to English Translation Quiz\n\nThis Java program is a simple **Swedish to English translation quiz** where users translate words and receive feedback on their answers.\n\n## Features\n- **Word Bank:** Contains 10 Swedish words and their correct English translations.\n- **Case-Insensitive Checking:** User input is compared to the correct answer regardless of case.\n- **Partial Credit:** If a user's answer is more than **50% correct**, they receive an \"Almost correct!\" message.\n- **Exit Option:** Users can type **'Q'** to quit at any time, displaying their final score.\n\n## How It Works\n1. The user is prompted with a Swedish word and must type the English translation.\n2. The program checks the answer:\n   - **Correct answers** increase the score.\n   - **Incorrect answers** display the correct word.\n   - **Partial matches** receive an \"Almost correct!\" message.\n3. If the user enters **'Q'**, the game ends and displays their total score.\n\n## Files\n- **`Lab4Code.java`**: Contains the main quiz logic.\n- **`Lab4.java`**: Runs the program by calling `Lab4Code`.\n\n---\n**Note:** The program could be improved by expanding the word bank and refining the similarity check.\n\n---\n",
  "Into_Java_Lab5": "# Lab5 - Movie Database Program\n\nThis Java program allows users to interact with a movie database. It supports searching movies by title or review score, as well as adding new movies with their review scores. The database is powered by two files:\n- **Movies** \u2013 Contains a list of movie titles.\n- **Review** \u2013 Contains review scores for the movies, with each score corresponding to a movie title in the **Movies** file.\n\n### Features\n- **Search by Title**: Users can search for movies by typing a keyword. The program will display all movies that contain the keyword, along with their review scores.\n- **Search by Review Score**: Users can search for movies with a review score greater than or equal to the number they specify (1\u20135).\n- **Add a Movie**: Users can add a new movie title and its review score to the database.\n- **Persistent Storage**: The movie titles and review scores are read from two external files, **Movies** and **Review**.\n\n### Program Structure\n1. **MovieDatabaseLogic.java**: Handles the core logic for storing and searching movie data. It uses `ArrayList` to store movie titles and ratings and provides methods for adding, searching, and retrieving data.\n2. **MovieDatabaseUI.java**: Provides the user interface through the command line. Users can interact with the program to search for movies or add new ones.\n3. **MovieDatabaseMain.java**: The entry point for the program that initializes and starts the movie database UI.\n\n### How It Works\n1. When the program starts, the **MovieDatabaseUI** presents a menu with options:\n   - **Search by title**: Allows the user to search movies by entering a keyword.\n   - **Search by review score**: Allows the user to search for movies with a rating greater than or equal to a specified score.\n   - **Add a new movie**: Allows the user to add a new movie title and its review score.\n2. The **MovieDatabaseLogic** class loads the data from the **Movies** and **Review** files, stores them in memory, and provides methods for searching and adding movies.\n3. After entering the database, the user can add a new movie, search by title, or search by rating, and the results will be displayed.\n\n### File Structure\n- **`MovieDatabaseLogic.java`**: Contains the logic for storing movie titles, ratings, and searching the database.\n- **`MovieDatabaseMain.java`**: The main class to start the program.\n- **`MovieDatabaseUI.java`**: The user interface class that handles user interactions through the command line.\n- **`Movies`**: A text file containing the list of movie titles.\n- **`Review`**: A text file containing the review scores for each movie, where each score corresponds to the title in the **Movies** file.\n\n---\n**Note:** The program could be improved by adding validation for duplicate movies and enhancing user interaction for a better experience.\n",
  "Algo_Lab1": "# Algorithms and Data Structures Lab 1: Multiply Algorithms\n\n## Project Overview\nIn this lab, the task is to implement two algorithms in the `Multiplier.java` class. The algorithms will process a list of numbers and compute sums based on specific multiplication rules. The two methods to be implemented are `multiplySome` and `multiplyAll`.\n\n### Tasks:\n1. **multiplySome**:\n   - In this method, the first and last elements of a list are multiplied, then the second and second-to-last, and so on. The results of these multiplications are then summed into a variable `sum`.\n   - For example, for the list `{ 0, 1, 2, 3, 4, 5 }`, the following operations occur:\n     - `0 * 5 = 0`\n     - `1 * 4 = 4`\n     - `2 * 3 = 6`\n   - The sum for the list will be `0 + 4 + 6 = 10`.\n\n2. **multiplyAll**:\n   - In this method, every element in the list multiplies with all other elements, and the results are summed into a variable `sum`.\n   - For example, for the list `{ 0, 1, 2, 3 }`, the following operations occur:\n     - `0 * 1 = 0`\n     - `0 * 2 = 0`\n     - `0 * 3 = 0`\n     - `1 * 2 = 2`\n     - `1 * 3 = 3`\n     - `2 * 3 = 6`\n   - The sum for the list will be `0 + 0 + 0 + 2 + 3 + 6 = 11`.\n\n### Key Details:\n- The primary goal of this assignment is to create algorithms that work according to the description, and not necessarily the most optimized solution. The focus is on understanding algorithmic concepts and correct implementation.\n- It will test the algorithms using `AlgoMultiplySmallSize.java`, which calls the algorithms with smaller data structures to ensure they work correctly. The file also contains comments describing the expected output for different list sizes.\n\n### Implementation Instructions:\n- Download the `algo_multiply.zip` file, which contains various classes. You only need to work with the `Multiplier.java` class.\n- In the methods `multiplySome` and `multiplyAll`, there are comments indicating where you need to write your code.\n- Use the other provided classes to check if your algorithms are implemented correctly.\n\n### Technologies Used:\n- **Java**: The assignment is implemented using Java, and I modify and work within the `Multiplier.java` class.\n\n### Example of Expected Output:\n- For `multiplySome` with `{ 0, 1, 2, 3, 4, 5 }`, the result should be `10`.\n- For `multiplyAll` with `{ 0, 1, 2, 3 }`, the result should be `11`.\n\n### Goal:\nThe main objective is to understand and implement basic algorithms that follow specific multiplication rules, reinforcing the concepts of algorithms and data structures in Java.\n",
  "Algo_Lab3": "# Algorithms and Data Structures Lab 3: Number Sequence Algorithms\n\n## Project Overview\nIn this lab, I implement two algorithms in Java for generating a number sequence. The algorithms will calculate the next number in the sequence by summing the previous number and the number three places before it. The sequence always starts with `{ 0, 1, 2 }`, and for any `n < 0`, the result is `0`.\n\n### Algorithms to Implement:\n1. **NumberSequenceIterative.java**:\n   - This implementation calculates the sequence iteratively using a loop.\n   \n2. **NumberSequenceRecursive.java**:\n   - This implementation calculates the sequence recursively by calling the method itself.\n\n### Sequence Definition:\nThe sequence is defined such that:\n- For all `n < 0`, the result is `0`.\n- The first three values are always `{ 0, 1, 2 }`.\n- For `n >= 3`, the value at `n` is computed as the sum of the values at `n-1` and `n-3`.\n\nFor example, for `n = 6`, the sequence will be:\n- `n(-1) = 0` (for all `n < 0`)\n- `n(0) = 0` (start of the sequence)\n- `n(1) = 1` (start of the sequence)\n- `n(2) = 2` (start of the sequence)\n- `n(3) = 2` (n(3) = n(2) + n(0) = 2 + 0)\n- `n(4) = 3` (n(4) = n(3) + n(1) = 2 + 1)\n- `n(5) = 5` (n(5) = n(4) + n(2) = 3 + 2)\n- `n(6) = 7` (n(6) = n(5) + n(3) = 5 + 2)\n\n### Task:\nYou are required to implement the number sequence algorithm in both iterative and recursive forms and ensure they work correctly with the help of `AlgoNumberSequence.java`.\n\n### Empirical Results:\nThe following are the times measured for running the two algorithms with varying values of `n`:\n\n- **NumberSequenceIterative**:\n  - `n = 1,000,000,000`: 1,265 ms\n  - `n = 1,250,000,000`: 1,443 ms\n  - `n = 1,500,000,000`: 1,741 ms\n  - `n = 1,750,000,000`: 2,198 ms\n  - `n = 2,000,000,000`: 2,425 ms\n\n- **NumberSequenceRecursive**:\n  - `n = 40`: 14 ms\n  - `n = 45`: 68 ms\n  - `n = 50`: 505 ms\n  - `n = 55`: 2,903 ms\n  - `n = 60`: 24,070 ms\n\n### Analysis:\n- **Time Complexity**:\n  Based on the empirical results, analyze the time complexity of each algorithm:\n  - For **NumberSequenceIterative**, how does the time grow as `n` increases?\n  - For **NumberSequenceRecursive**, what is the relationship between the input size `n` and the number of recursive calls? Consider drawing a diagram to illustrate the number of method calls.\n\n- **Reasoning**:\n  Is the time complexity for each algorithm reasonable based on your implementation? Discuss your reasoning and how the time grows with increasing `n`.\n\n### Submission:\n- Submit the following files:\n  - `NumberSequenceIterative.java`\n  - `NumberSequenceRecursive.java`\n  - A PDF containing answers to the analysis questions.\n\n### Evaluation Criteria:\nYour submission will be evaluated based on the following:\n- The task is submitted on time.\n- Both algorithms function correctly.\n- The implementation of the algorithms is reasonable based on the task description.\n- The code is clear, well-structured, and easy to follow.\n- All questions are answered, and the answers are well-supported and reasonable based on your implementation and the empirical data.\n",
  "Algo_Lab4": "# Algorithms and Data Structures Lab 4: Using TreeMap\n\n## Project Overview\nIn this lab, the task was implementing methods in the `TreeMapHandler` class to manage and retrieve data from a `TreeMap`. The lab involves working with a collection of key-value pairs stored in a `TreeMap` and implementing several methods that interact with the map.\n\n### Methods to Implement:\n1. **createTreeMap**:\n   - This method should create a `TreeMap` and populate it with the keys and values from an array of `Entry` objects provided as a parameter. \n   - If there are multiple objects with the same key, the first value should be inserted, and subsequent occurrences of the same key should not replace the existing value.\n\n2. **retrieve (with keys as a parameter)**:\n   - This method should retrieve values associated with the provided keys and store them in a new `Map` with the same keys.\n   - Try to optimize this method by checking for sequences of keys so that you can retrieve a subtree instead of retrieving each node individually.\n\n3. **retrieve (with start and end keys as parameters)**:\n   - This method should retrieve a subtree of keys and values between the two provided keys, inclusive of the start and end keys.\n\n4. **retrieveAllKeys**:\n   - This method should retrieve all the keys in the `TreeMap`.\n\n5. **retrieveAllValues**:\n   - This method should retrieve all the values in the `TreeMap`.\n\n### Testing:\nOnce you have implemented the methods, you can test them for correctness using the `AlgoTreeMap.java` file. This file contains comments explaining what each method is supposed to do and the expected output for various inputs.\n\n### Submission:\n- Submit the following files:\n  - `TreeMapHandler.java` (your implementation file)\n  - `AlgoTreeMap.java` (the provided file for testing)\n\n### Evaluation Criteria:\nYour submission will be evaluated based on the following:\n- Correct implementation of all the methods.\n- Efficient and well-optimized code, especially for the `retrieve` methods.\n- Proper use of the `TreeMap` and handling of edge cases (e.g., duplicate keys, invalid keys).\n- The code is well-structured, clear, and easy to understand.\n- The methods function correctly when tested with the provided test file.\n",
  "Algo_Lab5": "# Algorithms and Data Structures Lab 5: Implementing Sorting Algorithms\n\n## Project Overview\nIn this lab, I was required to implement four different sorting algorithms and analyze their performance. The algorithms to be implemented are:\n\n1. **InsertionSort.java**\n2. **DrakeSort.java**\n3. **JavaAPISort.java**\n\nThe **QuickSort.java** class is already implemented, so no changes are needed to this file. For **JavaAPISort**, I was required to use Java's built-in sorting APIs rather than implementing my own sorting algorithm.\n\n### Sorting Algorithms:\n\n1. **InsertionSort**:\n   - This algorithm sorts the array by iterating through it and moving elements into the correct position.\n   - **Algorithm Steps**:\n     - Start from `array[1]` to `array[length - 1]`.\n     - Compare the current element with the previous ones.\n     - If the current element is smaller than the previous one, move the larger element one step to the right.\n     - Continue until the current element is not smaller than the previous one, and place the current element in the correct position.\n\n2. **DrakeSort**:\n   - This algorithm works by creating an array with a size equal to the difference between the maximum and minimum values in the collection plus one.\n   - **Algorithm Steps**:\n     - Find the largest and smallest numbers in the collection.\n     - Create an array with a size of `(largest - smallest + 1)`.\n     - Iterate over the collection, incrementing the count at the corresponding index in the array.\n     - Create a new collection based on the sorted values using the counts.\n\n3. **JavaAPISort**:\n   - This is a simple implementation where you use Java's built-in sorting methods (`Arrays.sort` or similar) to sort the collection.\n\n### Testing:\nAfter implementing the sorting algorithms, you can test them using the `AlgoSorting.java` file. This file contains comments to guide you through the expected behavior and output of each algorithm.\n\n### Empirical Data:\nYou will also need to analyze the empirical data for each algorithm to determine their time complexity:\n\n#### InsertionSort Performance:\n| n       | Time (ms) |\n|---------|-----------|\n| 80,000  | 845       |\n| 160,000 | 3,463     |\n| 240,000 | 7,511     |\n| 320,000 | 13,394    |\n| 400,000 | 21,467    |\n\n#### DrakeSort Performance:\n| n          | Time (ms) |\n|------------|-----------|\n| 40,000,000 | 273       |\n| 80,000,000 | 475       |\n| 120,000,000| 527       |\n| 160,000,000| 784       |\n| 200,000,000| 892       |\n\n#### QuickSort Performance:\n| n          | Time (ms) |\n|------------|-----------|\n| 40,000,000 | 3,035     |\n| 80,000,000 | 6,321     |\n| 120,000,000| 9,099     |\n| 160,000,000| 12,950    |\n| 200,000,000| 15,457    |\n\n#### JavaAPISort Performance:\n| n          | Time (ms) |\n|------------|-----------|\n| 8,000,000  | 2,033     |\n| 16,000,000 | 3,600     |\n| 24,000,000 | 8,122     |\n| 32,000,000 | 10,088    |\n| 40,000,000 | 17,423    |\n\n### Analysis:\n- Based on the empirical data, analyze the time complexity of each sorting algorithm:\n  - **InsertionSort**: Analyze how the time grows with increasing `n`.\n  - **DrakeSort**: Investigate how the time complexity compares to the size of the dataset.\n  - **QuickSort**: Look at its performance compared to the others.\n  - **JavaAPISort**: Consider how Java's built-in sorting methods compare.\n\n- For **InsertionSort** and **DrakeSort**, discuss whether the empirical results match the expected theoretical time complexity. \n\n### Submission:\n- Submit the following files:\n  - `InsertionSort.java`\n  - `DrakeSort.java`\n  - `JavaAPISort.java`\n  - `AlgoSorting.java` (for testing)\n  - A PDF file with your analysis and answers to the questions regarding the time complexity of each algorithm.\n\n### Evaluation Criteria:\nYour submission will be evaluated based on the following:\n- Correct implementation of each sorting algorithm.\n- Efficiency and performance of the algorithms as observed from the empirical data.\n- Clear reasoning behind the time complexity analysis.\n- Well-structured and readable code.\n- Answers to the questions about time complexity are well-motivated and reasonable based on the empirical data.\n",
  "Algo_Project": "# Final Project: Weather Data Analysis\n\n## Project Overview\n\nIn this project, I was tasked with analyzing temperature data from the Visby Airport weather station for the period 1946-01-01 to 2020-12-31. I had to load, structure, and analyze the data using appropriate data structures and algorithms.\n\nThe provided data files are:\n\n- **smhi-opendata.csv**: Contains temperature data from the weather station.\n- **legend-smhi-opendata.txt**: Describes the structure and format of the data in the CSV file.\n- **algo_weatherdata.zip**: Contains several classes for an unfinished program that will analyze the weather data. You are required to finish the implementation in the `WeatherDataHandler.java` class.\n\n### Requirements:\n1. **Choose a suitable data structure** for storing the weather data.\n2. **Implement algorithms** in `WeatherDataHandler.java` to analyze the data efficiently.\n3. Focus on **low time complexity**, aiming for an efficient solution with preferably linear time complexity (O(n)).\n4. **Ensure robustness**, such that the program does not crash when querying dates that do not exist in the data.\n5. **Create a modular solution**, organizing the code into classes and methods to make future development easier.\n\n## Tasks:\n\n1. **Data Structure Selection:**\n   - Choose an appropriate data structure to store the weather data. You should consider options such as:\n     - **List**: Good for simple, ordered collections but might not be efficient for searching.\n     - **Tree**: Suitable for ordered data and efficient searching but may involve more complexity in implementation.\n     - **Hashed Structure (HashMap, HashSet)**: Ideal for fast lookups, especially if querying based on a specific key like date or temperature value.\n\n2. **Implementation of Algorithms:**\n   - Complete the unfinished methods in `WeatherDataHandler.java` as described by the comments in the file.\n   - Consider the choice between **iterative** or **recursive** solutions.\n   - Explore possible design techniques such as:\n     - **Greedy Algorithms**: Choosing the best option at each step.\n     - **Divide and Conquer**: Breaking down the problem into smaller subproblems.\n     - **Dynamic Programming**: Using previously computed results to solve overlapping subproblems efficiently.\n\n3. **Performance Considerations:**\n   - Ensure your algorithms have an efficient time complexity. The total number of data points in the file is approximately 533,000, so the time complexity should be close to O(n) or O(n log n) for most operations.\n\n## Report\n\nIn the report, you should answer the following questions:\n\n1. **Which data structure did you choose and why?**\n   - Explain your choice of data structure (e.g., List, Tree, HashMap).\n   - Discuss how the choice of data structure affects the efficiency of your algorithms.\n   - How would the time complexity change if you had chosen a different data structure?\n\n2. **How did you implement your algorithms and why?**\n   - Did you use an iterative or recursive approach?\n   - Explain the design techniques you used, such as greedy, divide and conquer, or dynamic programming.\n   \n3. **What is the time complexity of your algorithms?**\n   - Estimate the time complexity of your algorithms in terms of the total number of data points (n = 533,000).\n   - Provide reasoning for your time complexity analysis.\n\n### Submission:\n- Submit the following files:\n  - `WeatherDataHandler.java` with the completed implementation.\n  - Any additional classes or methods you created.\n  - Your report answering the questions above.\n\n### Evaluation Criteria:\n- Correct implementation of data structure and algorithms.\n- Efficiency and performance of the solution.\n- Well-reasoned analysis of the chosen data structures and algorithms.\n- Clean, modular, and readable code.\n",
  "Evenemang_App": "# University Activity Sharing App\n\nThis Android application is a project I built as part of my course in **App Development and Mobility**. It is not a real app but a prototype that allows university students to share and view posts related to various campus activities, such as parties, club meetings, sports events, and more.\n\nThe app is designed to reflect a digital version of an event board that are commonly found at many universities, where students can post and browse about different activities happening around campus.\n\n## Features:\n- **Post Sharing:** Students can upload posts with event details like title, address, time, price, description, and an image.\n- **Post List:** Browse a list of university-related activities and events using a `RecyclerView`.\n- **Post Details:** View detailed information about each event, including images and full descriptions.\n- **Easy Navigation:** Switch between the list of activities and detailed views seamlessly.\n- **Automatic Database Creation:** When a post is added, it is automatically stored in the SQLite database, allowing users to try the app and see posts in action right away.\n\n## Technologies Used:\n- **Java**\n- **XML**\n- **SQLite Database**\n\n## How It Works:\n1. **Browse Activities:** The main screen shows a list of posts representing various university activities.\n2. **View Event Details:** Clicking on a post opens a detailed view, where you can see more about the event and view any associated images.\n3. **Post Creation:** Students can upload events with details like event name, time, location, price, description, and an image.\n4. **Post Management:** All posts are stored in a local SQLite database that is automatically created when a post is added.\n5. **Try It Out:** Once posts are uploaded, they are immediately available for viewing and interacting with on the app, so you can try it out without needing any external setup.\n\n## Disclaimer:\nThis is **not a real app**, but rather a project I developed for my **App Development and Mobility** course. The app is intended for educational purposes only, demonstrating the implementation of basic Android functionality such as databases, RecyclerViews, and navigation.\n\n",
  "Decorator_Pattern": " # Decorator Pattern \u2013 Text Inserter\n\n## Overview\n\nThis project was developed as part of the **Architecture and Design Patterns** course. The goal of the lab was to enhance an existing Java desktop application using the **Decorator design pattern**. The application allows users to input a message and save it to a `.txt` file\u2014but now with optional text transformations applied before saving.\n\n## Objective\n\nTo prevent sensitive messages from being easily read, the app was extended to include **encoders** that modify the message text. These encoders are applied dynamically using checkboxes in the UI and are implemented using the Decorator pattern, allowing for scalable and modular text modification functionality.\n\n## Features\n\n- **Base Functionality:** Write a message and save it to a file (`Insert to file`).\n- **Text Encoders (via checkboxes):**\n  - **Base64 Encoding**\n  - **R\u00f6varspr\u00e5ket** (a Swedish \"Robber\u2019s Language\" encoding)\n  - **Super Implementation** (custom, creative encoding logic)\n- **Dynamic Composition:** Encoders can be combined and stacked in any order using decorators.\n\n## Design Pattern: Decorator\n\nThe **Decorator Pattern** allows behavior to be added to individual objects without affecting the behavior of other objects from the same class. In this project, it\u2019s used to dynamically add one or more encoders to the message handler chain before writing to file.\n\n### Example Structure:\n\n- `TextWriter` (interface)  \n- `PlainTextWriter` (base implementation)  \n- `Base64Decorator`, `RovarspraketDecorator`, `SuperDecorator` (decorators)\n\nEach decorator wraps another `TextWriter` and applies its transformation logic.\n\n## How It Works\n\n1. The user types a message in the input field.\n2. The user selects one or more encoders via checkboxes.\n3. When `Insert to file` is clicked:\n   - A `TextWriter` chain is built using the selected decorators.\n   - The message is passed through the chain, with each decorator applying its logic.\n   - The final result is saved to a text file.\n\n## Open/Closed Principle (OCP)\n\nThis solution aligns with the **Open/Closed Principle**, one of the SOLID design principles:\n\n> **Software entities should be open for extension, but closed for modification.**\n\n- The base writing logic does not need to be changed to add new encoders.\n- Each encoder is implemented as a separate decorator class.\n- Adding a new encoder simply requires creating a new decorator class that implements the same interface\u2014no changes to existing logic.\n\n## Technologies Used\n\n- Java\n- JavaFX (GUI)\n- Decorator Design Pattern\n- Standard Java I/O\n- Base64 encoding from `java.util.Base64`\n\n## Example\n\n- Input: `Hello`\n- Base64 Encoder: `SGVsbG8=`\n- R\u00f6varspr\u00e5ket Encoder: `HoHelollolo`\n- Super Encoder (custom): Depends on your implementation logic.\n\n## How to Run\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/AdamElSoudi/Coding-Portfolio.git\n   ```\n2. Navigate to the project:\n```bash\ncd Coding-Portfolio/University-Work/Java/Architecture_and_DesignPatterns/Decorator_Pattern/Lab\\ 2\\ -\\ Decorator\\ Pattern\n```\n3. Open in IntelliJ IDEA or another Java IDE.\n\n4. Run the application.\n\n5. Type a message, select encoders, and click Insert to file.\n\n## Disclaimer\nThis application was created for educational purposes as part of a university assignment and is not intended for production use.\n",
  "Observer_Pattern": "# Observer Pattern Implementation - Architecture and Design Patterns\n\n## Overview\nThis project was completed as part of the **Architecture and Design Patterns** course. The assignment required implementing the **Observer pattern** in a given project **without using Java's built-in observer utilities**. Additionally, the implementation needed to follow either the **push or pull methodology**, which was analyzed and explained as part of the solution.\nSee lab_raining_calculator_beskrivning.pdf for the assignment description.\n\n## Assignment Instructions\nThe task involved:\n1. Implementing the **Observer pattern** into an existing project.\n2. Ensuring a proper **separation of concerns** in the code structure.\n\n## Implementation Details\n- The **Observer pattern** was manually implemented using **custom interfaces and classes**.\n- The **Subject (Observable)** maintains a list of **Observers** and notifies them when state changes.\n- Observers **register/unregister** dynamically and receive updates from the Subject.\n- The given codebase was **extended** while maintaining the original structure and adhering to **design principles**.\n\n## Key Components\n- **Subject (Observable):** Maintains a list of observers and notifies them of changes.\n- **Observer:** Receives updates from the subject when changes occur.\n- **Concrete Implementations:** Specific classes that extend the observer pattern logic.\n\n## Notes\n- **Java's native observer utilities** were **not** used as per the assignment restrictions.\n- The design follows **object-oriented principles** to ensure modularity and maintainability.\n\n---\n\nThis project serves as a demonstration of **manual Observer pattern implementation** and its application in **design patterns and software architecture**.\n\n\n",
  "Wild_Patterns": "# Wild Patterns Chat Application\n\n## Overview\n\nThe **Wild Patterns Chat Application** is a Java-based desktop chat client developed as part of a university course on Architecture and Design Patterns. The application aims to simulate a nostalgic chat experience for older users and was designed to demonstrate the use of robust software architecture principles and design patterns.\n\n## Features\n\n- **Dynamic Protocol Switching** \u2013 Change between UDP and WebSocket communication at runtime using radio buttons.\n- **Decoupled Architecture** \u2013 Implements an Observer pattern to separate concerns and improve modularity.\n- **Flexible Logging System** \u2013 Chat messages and errors are logged to the console with timestamps, with the logging system designed for future extensibility.\n\n## Design Patterns Implemented\n\n| Pattern    | Purpose                                                                  |\n|------------|--------------------------------------------------------------------------|\n| Strategy   | Dynamically switch between UDP and WebSocket communication protocols     |\n| Observer   | Allow components to react to communication events without tight coupling |\n| Singleton  | Ensure a single shared logging instance throughout the application       |\n\n## How to Run\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/AdamElSoudi/Coding-Portfolio.git\n```\n\n2. Navigate to the project:\n```bash\ncd Coding-Portfolio/University-Work/Java/Architecture_and_DesignPatterns/Wild_Patterns/Lab\\ 3\\ -\\ Wild\\ Patterns/WILD\n```\n3. Open the project in IntelliJ IDEA or another Java IDE.\n\n4. Run the application **twice** to simulate two chat windows.\n\n5. Use the radio buttons to switch between UDP and WebSocket protocols.\n\n## How It Works\n\n### Strategy Pattern\nUsed to dynamically switch between `UDPChatCommunicator` and `WebSocketCommunicator`. The `ChatCommunicator` interface allows the controller to change communication logic at runtime.\n\n### Observer Pattern\nCustom observer implementation decouples communication logic from the user interface. Communication classes notify observers (like the controller) when messages are received.\n\n### Singleton Pattern\nThe `Logger` class is implemented as a Singleton, allowing centralized and consistent logging throughout the application.\n\n## SOLID Principles\n\n- **Single Responsibility** \u2013 Each class has a distinct and focused responsibility.\n- **Open/Closed** \u2013 New communication methods or logging outputs can be added without changing existing code.\n- **Liskov Substitution** \u2013 Communicator classes are interchangeable via the common interface.\n- **Interface Segregation** \u2013 Interfaces are small and specific to the needs of the implementers.\n- **Dependency Inversion** \u2013 High-level modules rely on abstractions (interfaces), not concrete implementations.\n\n## Disclaimer\n\nThis application was developed for educational purposes only as part of a university assignment. It is not intended for production use.\n",
  "Software_Dev_Project": "# MarsTravel \u2013 Software Development Methods Project\n\n## \ud83e\ude90 Overview\n\n**MarsTravel** is a Java-based desktop application developed as a group project for the **Software Development Methods** course. The system simulates an interplanetary travel booking service, allowing users to plan and purchase trips to Mars\u2014including rocket tickets, hotel accommodations, and bundled travel packages.\n\nThis project emphasized agile software development through sprint-based iterations, team collaboration, and modular system design.\n\n---\n\n## \ud83d\ude80 Key Features\n\n- **Rocket Ticket Booking**  \n  Users can view and purchase tickets for space travel to Mars.\n\n- **Hotel Booking**  \n  Browse available accommodations on Mars and complete hotel reservations.\n\n- **Travel Packages**  \n  Bundle hotel stays, rocket tickets, and exclusive tours into all-in-one travel packages.\n\n- **User-Friendly Interface**  \n  Built using **JavaFX** for a responsive and interactive booking experience.\n\n- **Database Integration**  \n  Bookings and available services are stored and managed using **SQL** and a backend database.\n\n- **Modular Structure & Sprint-Based Workflow**  \n  Developed in sprints, following agile methodology and assigning team members to focus areas (UI, logic, database, etc.).\n\n---\n\n## \ud83d\udee0\ufe0f Technologies Used\n\n- **Java** \u2013 Core language for backend logic and application structure  \n- **JavaFX** \u2013 GUI framework for a rich user interface  \n- **SQL** \u2013 Database integration to manage bookings and services  \n- **Scene Builder** \u2013 Used to design and organize FXML-based UI components\n\n---\n\n## \u26a0\ufe0f Database Setup Required\n\n> \u2757 **Important:** The application **requires a database** to be set up before it can run correctly.\n\n- The SQL file `mtdone.sql` is included in the project repository and contains all necessary table definitions, data, and stored procedures.  \n  \ud83d\udc49 [View mtdone.sql on GitHub](https://github.com/AdamElSoudi/Coding-Portfolio/blob/main/University-Work/Java/Software_Development_Methods_Project/mtdone.sql)\n\n\n  ### To set up the database:\n\n1. Open your MySQL client (e.g., MySQL Workbench, phpMyAdmin, or terminal).\n2. Create a new database (recommended name: `mt`).\n3. Import the SQL dump file:\n```sql\nSOURCE /path/to/mtdone.sql;\n```\n> Replace `/path/to/mtdone.sql` with the actual path to the `mtdone.sql` file on your machine.\n\n\n_Or, in **MySQL Workbench**: `File \u2192 Open SQL Script \u2192 Run`._\n\nMake sure your `DatabaseConnect.java` file has the correct database name (`mt`) and login credentials for your local MySQL server:\n- **Database name:** `mt`  \n- **Host:** `localhost`  \n- **Username and password:** your MySQL credentials\n\n---\n\n## \ud83d\udc65 Team Collaboration\n\nMarsTravel was developed by a team of **5 members**, each contributing to different components of the system, such as:\n\n- Database schema and query development\n- Controller logic and Java backend\n- JavaFX front-end layout and UI behavior\n- System integration and testing\n\nAgile practices were used throughout the project, with tasks divided into **sprints** and regular evaluations for feedback and improvement.\n\n---\n\n## \ud83d\udcc2 Project Structure Highlights\n\n- `controllers/` \u2013 JavaFX controllers for booking flows (hotels, tickets, packages)  \n- `models/` \u2013 Logic and data representations (e.g., `Booking`, `User`)  \n- `database/` \u2013 SQL access layer via `DatabaseConnect.java`  \n- `resources/fxml/` \u2013 GUI layout files built with Scene Builder\n\n---\n\n## \ud83d\udccc Note\n\nThis project was created strictly for educational purposes as part of a university assignment. While the UI and system design aim to simulate a real-world travel platform, the data and booking functionality are fictional and not intended for commercial use. In other words, you cannot actually book a trip to Mars.\n",
  "EnvironmentCrime": "# Milj\u00f6boven - ASP.NET Core MVC Application\n\n## Project Overview\nThis project is a web application developed in **ASP.NET Core MVC** using **Entity Framework** with a **MySQL database**. It was built as part of the .NET development course to demonstrate skills in authentication, authorization, database interaction, and clean code practices.  \n\n**Key Features:**\n- User authentication and authorization using **ASP.NET Identity**.\n- Role-based access control (Admin, Employee, and User).\n- Dynamic data retrieval based on the logged-in user's role.\n- Implementation of **MVC architecture** with a clear separation of concerns.\n- Database integration using **Entity Framework Core** with **MySQL**.\n\n## Important Note \u26a0\ufe0f\nThis project **requires a local MySQL database setup** that was originally run using **Docker containers**. Since the database files are not included in this repository, the project **cannot be run directly** without manually setting up the database.\n",
  "GuessTheNumber1": "# Guess The Number 1\n\n## Project Description\nThis C# console application is a number guessing game where players attempt to guess a randomly selected number between 1 and 100. Feedback is provided on each guess, indicating whether the actual number is higher or lower, which helps players refine their subsequent guesses.\n\n## How to Play\n- The game starts by prompting the player to guess a number between 1 and 100.\n- After each guess, it informs whether the guess was too high or too low.\n- Upon guessing the number correctly, the player can choose to play again or exit.\n- The game tracks the number of guesses per round and displays summary statistics at the end.\n\n## Features\n- Interactive guessing with dynamic feedback.\n- Option to replay after each round.\n- Tracks and displays guess statistics per round.\n\n## System Requirements\n- .NET Framework\n- Supports any operating system that can run C# console applications.\n",
  "GuessTheNumber2": "# Guess The Number 2\n\n## Project Description\nThis C# console application enhances the first number guessing game with additional features such as high score tracking and improved user interactions, providing a more engaging and competitive experience.\n\n## How to Play\n- Players guess a number within a specified range.\n- Feedback is given on whether the guess is too high or too low.\n- High scores are recorded and displayed.\n\n## Features\n- High score tracking.\n- User-friendly console interface for easy navigation.\n\n## System Requirements\n- .NET Framework\n- Compatible with systems that can run C# console applications.\n",
  "IT-Security_Project": "# Secure Programming - Assignment\n\n## Assignment Overview\nThe goal of this assignment is to implement a secure solution for a web application designed for employee sick leave registration. The application prototype is provided, and your task is to secure it by applying secure coding practices and addressing security concerns.\n\nThe task will build on the previous \"Threat Modeling\" assignment, which must be approved before proceeding with this assignment.\n\n---\n\n## Learning Goals\n- Apply models and guidelines for developing secure web applications.\n- Implement various cryptographic methods to secure web applications.\n\n---\n\n## Background\nYou are a consultant at CodeSec and have been assigned the task of reviewing the development of a software application for registering sick leave. A web application has been created for this, but it lacks a deliberate focus on security. Additionally, you have created a threat model for this web application, and now it\u2019s time to review the prototype and ensure that the application can be secured.\n\nPlease note that this task builds on the previous \"Threat Modeling\" assignment, which must be completed and approved before proceeding.\n\n---\n\n## Assignment Details\n\n### Objective:\nImplement a secure solution and highlight the security controls/design principles used.\n\n### Task:\n- Review the code of the partially implemented web application for sick leave and ensure security is incorporated. You must implement missing functionalities related to security (e.g., login functionality) and write comments on all security-related aspects, referencing the points in the provided checklist.\n- Example: In views where variables like `@variabelnamn` appear, comment: \u201cChecklist 2.4: Using Razor View prevents XSS attacks.\u201d\n\n### Prerequisites:\n- You are working with a .NET Core application provided on the course page. Note that it is incomplete and requires fixing the database and other components before running.\n- **Important**: The databases are locally stored on my device and is **not included** in this upload. Therefore, you will not be able to run the application without configuring your own database.\n- The following use cases have been partially implemented:\n  - Employees can log in to report sick leave.\n  - Sick leave for today.\n  - Sick leave with a doctor\u2019s note (start and end date).\n  - Sick leave for child care (select a child and provide the date).\n  - HR can log in to search for employees using an employee number (unique) and view sick leave and child care leave details.\n  - IT personnel can log in to view logs and retrieve log data (decrypted).\n\n---\n\n## Non-functional Requirements\nYou must implement the following non-functional requirements:\n- Password policy from the threat model must be implemented.\n- All actions in the application should be logged (time, user, IP address, action). These logs must be encrypted. This includes logging in, failed login attempts, sick leave actions, employee searches, and log access.\n- Comment your code where security measures are applied and reference the relevant points from the checklist. The checklist is found under \"Cechklista Programmering 2022.pdf\".\n\n---\n\n## Threat Modeling Assignment Recap\n\n### Learning Goals\n- Describe models and guidelines for developing secure web applications.\n- Conduct risk analysis and threat modeling.\n\n### Background\nYou are consultants at CodeSec and have been assigned to lead the development of software for registering sick leave. Employees at PillMedTech should be able to log in from home and report sick leave or child care leave.\n\nSensitive personal information (e.g., personal ID numbers) will be transmitted. Your client, PillMedTech, turned to CodeSec due to your strong reputation in creating stable and secure web applications.\n\nYou have been provided with some background on the company\u2019s IT security (see PillMedTech.pdf, pages 10-11), and the process of creating a security policy is already underway.\n\nYou decide to conduct a thorough threat modeling and propose security measures for the web application.\n\n### Tasks for Threat Modeling Assignment:\n- Describe the different roles that will use the application, and create a use case diagram.\n- Describe the pros and cons of running the application on the provided environment.\n- Fill in the table for entry points and explain what entry points are.\n- Identify and classify assets in the application and explain what they are.\n- Fill in the trust levels table and explain what each role can do.\n- Create at least one data flow diagram and describe what it represents.\n- Conduct a threat analysis and describe the threats against the sick leave system, their impact, and the countermeasures that should be implemented.\n- Create a password policy and explain why it\u2019s necessary and how it should be communicated within the organization.\n\n---\n",
  "Software_Project": "",
  "DB1_Project": "# Database Project: Monster Collector Mobile Game\n\n## Project Overview\nThis project involves building the database solution for a mobile application where players collect various figures (or monsters). \nThe game starts with 100 different types of monsters, all belonging to the same region (with potential expansions where new monsters will belong\nto different regions). Each monster type has a name and a description.\n\nPlayers can capture and own one or more monsters of each type. Each player has a unique username, phone number, and email address.\nPlayers can also be friends with other players in the game. There are three teams in the game: Cyan, Magenta, and Yellow, and each player\nbelongs to one of these teams. The game also includes Gyms, where players can assign one of their monsters to guard a Gym.\nEach Gym has a name and is associated with GPS coordinates.\n\nPlayers earn experience points (XP) and level up based on their XP. \nThe project required the implementation of various SQL queries to retrieve and manipulate data for the mobile application.\n\n## Project Requirements\n\n### Entity Overview:\n- **Monsters**: 100 types of monsters with names, descriptions, and region affiliations.\n- **Players**: Each player has a unique username, phone number, email, and team affiliation (Cyan, Magenta, or Yellow).\n- **Gyms**: Players can assign their monsters to guard Gyms, each associated with a name and GPS coordinates.\n- **XP and Levels**: Players earn XP and level up according to their experience:\n  - Level 1: 0-1000 XP\n  - Level 2: 1001-3000 XP\n  - Level 3: 3001-6000 XP\n  - Level 4: 6001-10000 XP\n  - Level 5: More than 10000 XP\n\n### SQL Queries Implemented:\n1. **List player names and the number of monster types they have captured.**\n2. **Count the number of players in each team.**\n3. **List all players with their levels based on XP.**\n4. **List all monster types and the number of each monster captured by players.**\n5. **List the player with the most friends in each team.**\n6. **List the monster types and the number of each type captured by the player who has captured the most monsters.**\n7. **List the three monster types with the least number of captures.**\n8. **Calculate the average number of monsters captured by each player per type.**\n9. **List the Gyms guarded by a player's friends, including the monster guarding the Gym and the friend's name.**\n10. **List phone numbers of players who have monsters guarding a Gym near a shopping mall, to offer businesses special offers via SMS.**\n\n### Technologies Used:\n- **SQL**: Used to design and implement the database schema and queries.\n- **Database**: Relational database management system (RDBMS) to store player, monster, Gym, and other relevant data.\n\nThe goal of this project was to demonstrate database design and query skills while working in a team environment.\nWe focused on applying concepts from software development methods and database design principles to ensure the system\nis both efficient and scalable.\n",
  "DB2_lab_1": "# Databases 2 - Lab 1: Movie Database\n\n## Overview\nThis repository contains the SQL scripts for **Databases 2 - Lab 1** at university. The lab focuses on creating a movie database schema, inserting sample data, and writing SQL queries for various tasks such as creating views, joining tables, and aggregating data. The `03_lab_queries.sql` is my own work, the tables and data was provided by the university.\n\n\n## How to Run\nFollow the steps below to set up and run the lab scripts:\n\n### Step 1: Create Tables\nRun the `01_create_tables.sql` file in your MySQL Workbench to create the necessary tables for the movie database. This includes tables for `Movies`, `Genres`, and `MoviesGenres`.\n\n### Step 2: Insert Sample Data\nRun the `02_insert_data.sql` file to insert the sample data into the created tables. This will populate the database with movie records, genre types, and the relationships between movies and genres.\n\n### Step 3: Execute Queries\nRun the `03_lab_queries.sql` file to execute the SQL queries that implement the required views and operations from the lab instructions. These queries include:\n- Creating views for movie genres, top-rated movies, genre counts, and more.\n- Performing aggregate operations like calculating average ratings per genre.\n\n## Queries Overview\nThe following SQL views and queries were created as part of this lab:\n\n1. **MovieGenre** - A view that lists all movies and their associated genre.\n2. **MoviesYears** - A view that lists movie titles with their release year, sorted alphabetically.\n3. **TopRated** - A view that filters and lists only movies with ratings of 8 or higher.\n4. **GenreCount** - A view that counts the number of movies for each genre.\n5. **GenreRatings** - A view that calculates the average movie rating for each genre.\n6. **Actors and Relationships** - SQL queries to create tables for actors, link them to movies, and insert actor data.\n7. **MoviesDoneByActor** - A view that lists actors and how many movies they've been involved in.\n\n## Prerequisites\n- MySQL Workbench or any MySQL-compatible tool\n- Access to a MySQL server for running the queries\n\n",
  "DB2_lab_2": "# Databases 2 - Lab 2: Users, Friends, and Hobbies Database\n\n## Overview\nThis database hosts SQL scripts for Lab 2 of the Databases 2 course, focusing on the relational interactions between users, their friends, and their hobbies. The `03_lab_queries.sql` contains my SQL queries, while the table structures and initial data setups were provided by the university.\n\n## Repository Structure\n- `01_create_tables.sql`: Contains SQL commands for creating user and hobby-related tables.\n- `02_insert_data.sql`: Scripts to populate the tables with initial data.\n- `03_lab_queries.sql`: Features SQL queries for manipulating and querying the data according to lab requirements.\n\n## Features\n- **Views Creation**: Includes views like `all_users` for user friendships and `friends_list` for individual user friends.\n- **Dynamic Procedures**: Procedures for adding hobbies, users, and friendships enhance the interactivity of the database.\n\n## How to Run\nTo utilize the database scripts effectively, follow these steps:\n\n### Step 1: Setup Tables\n- **Users and Hobbies**: Execute `01_create_tables.sql` to initialize the database schema for users and hobbies.\n- **Data Insertion**: Run `02_insert_data.sql` to fill the tables with initial data, setting the stage for query operations.\n\n### Step 2: Execute Queries\n- **Operational Queries**: Launch `03_lab_queries.sql` to run the series of predefined queries and observe the database in action.\n\n### Notable SQL Operations\n- **Complex Queries**: Such as determining potential friends based on existing friendships and suggesting new friends through queries.\n\n## Prerequisites\n- **MySQL Workbench** or a similar MySQL-compatible interface.\n- An active **MySQL server** connection for executing SQL scripts.\n",
  "DB2_lab_3": "# Databases 2 - Lab 3: Users & Orders\n\n## Overview\nThis repository contains the SQL scripts for **Databases 2 - Lab 3** at university, focusing on comprehensive SQL operations involving users and orders. The `03_lab_queries.sql` is my work, the tables and data was provided by the university.\n\n## Repository Structure\n- `01_users_data.sql`: Script to create and populate the Users table.\n- `02_orders_data.sql`: Script to create and populate the Orders table.\n- `03_lab_queries.sql`: Contains all operational queries for managing the database as per the lab's requirements.\n\n## Features\n- **Dynamic Queries**: Includes day-related operations using `now()` to determine specific weekdays for current and upcoming months.\n- **Time-Sensitive Triggers**: Implements triggers that prevent future-dated entries, ensuring data integrity.\n- **Custom Procedures and Functions**: Features user-created procedures for birthdays and a function to calculate age, enhancing the database's interactivity.\n\n## How to Run\nTo deploy and use the database scripts, follow these instructions:\n\n### Step 1: Setup Tables\n- **Users**: Run `01_users_data.sql` to create user tables and insert initial data.\n- **Orders**: Execute `02_orders_data.sql` to set up order tables and populate them with sample data.\n\n### Step 2: Execute Queries\nRun the `03_lab_queries.sql` file to execute the SQL queries that implement the required views and operations from the lab instructions.\n\n### Notable Queries and Operations\n- **Weekday Determination**: Queries to find out the weekday for the last day of the current month, the first day of the next month, and New Year's Eve 2025.\n- **Lunch Countdown**: A procedure that shows how many minutes until noon.\n- **Birthday Viewer**: A procedure that displays users with birthdays on specified days.\n- **Age Calculation**: A function to calculate the user's age from the birthdate.\n\n## Additional Notes\n- **Database Security**: This lab incorporates essential security practices through the use of triggers and role-based data visibility.\n- **Data Integrity**: Demonstrates maintenance of data integrity and timely data processing within a SQL environment.\n\n## Prerequisites\n- **MySQL Workbench** or any MySQL-compatible database management tool.\n- Access to a **MySQL server** where you can execute SQL commands.\n",
  "DB2_lab_4": "# Databases 2 - Lab 4: Employees & Projects\n\n## Overview\nThis repository contains the SQL scripts for **Databases 2 - Lab 4** at university.  \nThe `05_lab_queries.sql` file contains my work, while the table creation scripts and the initial data setups were provided by the university.\n\n## Repository Structure\n- `01_employees_data.sql`: Script for creating and populating the Employees table.\n- `02_projects_data.sql`: Script for creating and populating the Projects table.\n- `03_project-members_data.sql`: Initializes Project Members linkage table.\n- `04_departments_data.sql`: Creates and populates the Departments table.\n- `05_lab_queries.sql`: Contains all operational queries for implementing advanced database features.\n\n## Features\n- **Database Integrity and Constraints**: Introduces foreign key relationships with specific update and delete rules to maintain database integrity.\n- **Index Optimization**: Implements indexing for faster query performance, particularly on employee last names and login fields.\n- **Custom Triggers and Procedures**: From ensuring data integrity by preventing certain updates to creating automated responses to database events.\n- **Data Type Optimization**: Refines SQL data types to enhance storage efficiency and performance.\n- **Comprehensive Views and Functions**: Includes a variety of SQL views and functions that extend the functionality and querying capability of the database.\n\n## How to Run\nTo set up and utilize the database scripts effectively, follow these steps:\n\n\n### Step 1: Setup Database Schema\n- **Employees and Projects**: Run `01_employees_data.sql` and `02_projects_data.sql` to prepare your database schema with necessary tables and initial data.\n\n### Step 2: Link Tables and Insert Data\n- **Linkages and More Data**: Execute `03_project-members_data.sql` and `04_departments_data.sql` to further populate the database and establish necessary relationships.\n\n### Step 3: Execute Advanced Queries\n- **Operational Queries**: Launch `05_lab_queries.sql` to run the series of predefined queries for database manipulation and management.\n\n## Additional SQL Operations\n- **Dynamic SQL Triggers**: Configure triggers to control data entry and update conditions, ensuring logical consistency throughout the database.\n- **Security and Role-Based Access**: Implements security measures through triggers and role-based views to ensure data is accessible only to authorized roles.\n\n## Prerequisites\n- **MySQL Workbench** or a similar MySQL-compatible interface.\n- An active **MySQL server** connection for executing SQL commands.\n\n## MySQL Configuration\nEnsure the following MySQL settings for optimal performance:\n- **Strict SQL Mode**: Enforces strict SQL syntax and behaviors.\n- **Foreign Key Checks**: Should be enabled to maintain referential integrity.\n- **SQL Mode**: Set to `ONLY_FULL_GROUP_BY` to enforce full group by behavior in queries.\n",
  "DB2_lab_5": "# Databases 2 - Lab 5: Accounts & Transactions\n\n## Overview\nThis project contains SQL scripts for **Databases 2 - Lab 5** at university that implement a basic banking system. The database supports multiple users, shared bank accounts, transaction logging, and includes constraints to ensure that accounts never drop below zero. The `01_lab_queries.sql` file contains my work, including table creation, queries, procedures, functions, and roles.\n\n## Features\n- **Multi-Owner Accounts**: An account can be owned by one or more users.\n- **Deposit & Withdraw Procedures**: Safely handle account balances using transaction blocks.\n- **Transfers Logging**: All deposits and withdrawals are automatically logged with timestamp and notes.\n- **Ownership View**: Displays which users own which accounts.\n- **Ownership Count Function**: Returns how many users are associated with a given account.\n- **Transfer History Procedure**: Returns transaction history for a specific account.\n- **Security Logic**: Ensures users can\u2019t overdraw or deposit invalid amounts.\n- **Access Control**: MySQL users, roles, grants, and revokes are implemented for database security.\n\n## How to Run\nFollow the steps below to set up and run the lab scripts:\n\n### Step 1: Execute Queries\nRun the `01_lab_queries.sql` file in MySQL Workbench or another MySQL-compatible tool.  \nThis script will:\n- Create the necessary tables (`Users`, `Accounts`, `Transfers`, `Owners`)\n- Insert sample data for users and accounts\n- Implement required views, procedures, functions, transactions, user roles, and permissions\n\n## Prerequisites\n- MySQL Workbench or any MySQL-compatible tool  \n- Access to a MySQL server for running the queries  \n\n## MySQL Settings\nThe following settings need to be applied:\n\n- MySQL may be configured in **strict mode**  \n- **Foreign key checks** must be **enabled**  \n- Grouping should be set to **ONLY_FULL_GROUP_BY**  \n",
  "DB2_lab_6": "# Databases 2 - Lab 6: Webshop Orders & Inventory\n\n## Overview\nThis project contains the SQL scripts for building and managing a relational database for a fictional webshop system, including customers, orders, items, categories, and logs. The database supports operations for tracking inventory, logging item views, and managing order content.\n\nAll code is included in the `01_lab_queries.sql` file, which covers:\n- Table creation based on the ERD provided\n- Procedures for adding/removing items in orders\n- Triggers for managing low-stock tracking\n- Views for popular items and order summaries\n- Custom procedures, functions, and materialized views based on an original extension to the ERD\n\n## ER Diagram\n\nThe following ERD was provided as the foundation for this lab:\n\n![ERD Diagram](https://raw.githubusercontent.com/AdamElSoudi/Coding-Portfolio/main/University-Work/Databases/Databases_2/SQL_Labs/DB2_Lab_6/Lab6_ERD.png)\n\n## Repository Structure\n- `01_lab_queries.sql`: Contains all SQL for table creation, data insertion, procedures, views, functions, triggers, and test queries.\n- `Lab6_ERD.png`: Provided entity-relationship diagram used as a base for the database schema.\n\n## Key Features\n- **Inventory Management**: Automatically updates stock levels and tracks low inventory through triggers and a dedicated table.\n- **Order System**: Orders can contain multiple items, and items can belong to multiple categories.\n- **Item Logging**: Tracks how often each item is viewed using a log table and a dedicated view (`hot_items`).\n- **Web-Ready Procedures**: Includes utility procedures like `show_order`, `add_item_to_order`, and `remove_item_from_order` for frontend integration.\n- **Order History Reporting**: Procedure to view total order values over custom time ranges.\n- **Custom Extensions**: Includes additional logic such as a new entity with supporting views, procedures, functions, and a materialized view.\n\n## How to Run\n1. Open `01_lab_queries.sql` in **MySQL Workbench** (or a compatible SQL client).\n2. Execute the script to:\n   - Create all necessary tables\n   - Insert sample data (e.g. customers, items, orders, categories)\n   - Create procedures, triggers, views, and functions for the webshop logic\n3. Run the included test queries to verify the logic and functionality of the procedures and views.\n\n## Prerequisites\n- MySQL Workbench or any compatible SQL tool\n- Access to a MySQL server\n\n## MySQL Configuration\nMake sure the following settings are applied before running the script:\n- Foreign key checks: **Enabled**\n- SQL mode: **ONLY_FULL_GROUP_BY** must be active\n- MySQL may be running in **STRICT mode**\n",
  "linUM1_lab9": "# Linux Assignment 9 - Debian Package Management & Man Page Creation  \n\n## Overview  \nThis project was part of my Linux course, where I explored Debian's package management system, specifically working with `dpkg` and `APT`. The primary objective was to package a standalone version of `electrotest`, an application I originally developed in assignment 6 for the course Linux Development Environment 1. Additionally, I created a simple man page for the application.  \n\n## Project Scope  \n- Converted `electrotest` into a standalone C program (`electrotest-standalone.c`) that does not rely on dynamically linked libraries.  \n- Packaged the program as a `.deb` package using `debmake` and `debuild`.  \n- Ensured proper installation of the package in the appropriate system directories.  \n- Addressed package quality checks using `lintian`, resolving all but specific non-critical warnings.  \n- Verified package integrity using `dpkg-deb`.  \n\n## About Electrotest  \nThe `electrotest` application is designed to perform electrical calculations, including:  \n- Computing total resistance for series and parallel resistor circuits.  \n- Calculating power dissipation using voltage and resistance or voltage and current.  \n- Determining the closest E12-series replacement resistors.  \n\nOriginally, the program was built using multiple dynamic libraries. For this lab, I restructured it into a single standalone C file to make packaging simpler.\n\n## Running the Program  \nSince I worked on macOS, I used [UTM](https://mac.getutm.app/) as my virtual machine to run Linux. To execute the `electrotest` program:  \n\n1. Open a terminal and navigate to the directory where `electrotest` is located.  \n2. Run the program with the following command:  \n\n   ```bash\n   ./electrotest\n",
  "Python_Project": "# Electricity Price Analysis (Sweden, 2018\u20132023)\n\nThis project analyzes and visualizes electricity price trends in Sweden for apartments and villas (residential customers) between 2018 and 2023. It was developed as part of a university assignment and includes data processing, statistical analysis, and visualizations using Python.\n\n## Features\n\n- \ud83d\udcca **Reads and processes** electricity price data from CSV files.\n- \ud83d\udcc8 **Plots monthly price trends** for different customer types and pricing agreements.\n- \ud83d\udcc9 **Calculates statistics**: min, max, average, and median values.\n- \ud83d\udd04 **Tracks month-over-month changes** for different pricing agreements (e.g., fixed or variable).\n- \ud83e\uddee **Compares pricing across four regions** (SE1\u2013SE4) in Sweden.\n\n## Technologies Used\n\n- Python 3\n- `matplotlib` for data visualization\n- `csv` for file handling\n\n## Input Data\n\n- `lghpriser.csv` \u2013 Apartment customer prices\n- `villapriser.csv` \u2013 Villa customer prices\n\n## How It Works\n\nThe program guides the user through several steps:\n1. Load data from CSV files.\n2. Choose customer type, year, pricing model (R, F1, F3), and region (SE1\u2013SE4).\n3. View a statistical breakdown and visual analysis of pricing data.\n4. Explore long-term trends across multiple years.\n\n## Output\n\n- Interactive line and bar charts\n- Printed tables with price stats\n- Clean, console-based user interaction\n\n## Example\n\n```plaintext\nAnalys av elpriserna f\u00f6r kategorin villakund \u00e5r 2020\n\nPrisomr.  min -- (m\u00e5n)  max -- (m\u00e5n)  medel  median   ...\nSE1       17.82 apr     42.20 jan     28.92  29.72    ...\n...\n",
  "Cal_Calc": "# Calorie Calculator Website\n\nThis is the final project for my Web Application Development course. My project involved creating a calorie calculator website that allows users to search for food items and retrieve their nutritional values such as calories, protein, fat, sodium, and more.\n\n## Pages\n\nThe website consists of 5 HTML pages:\n\n1. **Home**: The landing page of the website.\n2. **Calculator**: The main page where users can search for food items and view their nutritional information. \n3. **Information**: Provides information about the calorie calculator and its features.\n4. **Ready Meals**: Displays a list of pre-calculated meals with nutritional values.\n5. **Contact Us**: A page with contact information and a form to reach out for inquiries.\n\n## Key Features\n\n- **Search Functionality**: On the **Calculator** page, users can type in food items, and the website will fetch nutritional information about the item using an API. The search result includes detailed information such as:\n  - Calories\n  - Protein\n  - Fat\n  - Sodium\n  - Potassium\n  - Cholesterol\n  - Carbohydrates\n  - Fiber\n  - Sugar\n  \n- **API Integration**: The application uses the [API Ninjas Nutrition API](https://api-ninjas.com/) to fetch nutritional data. The API allows searching for food items and retrieving nutritional values in JSON format.\n\n## JavaScript Files\n\nThe **Calculator** page relies on 3 main JavaScript files:\n\n1. **search.js**: Listens for a key press event in the search bar and triggers the search when the Enter key is pressed.\n2. **ajax.js**: Handles the API request and processes the data to display it in a table format on the page.\n3. **index.js**: Calls the functions from the other files to fetch and display the data.\n\n### The JavaScript Flow:\n- `search.js` captures the user\u2019s query and sends it to the `ajax.js` file.\n- `ajax.js` fetches the data from the API and populates the nutritional information into the table on the **Calculator** page.\n\n## Current Status\n\nThe search functionality is dependent on the API key provided for the API Ninjas service. However, the API key is no longer active, so the search function is currently non-functional.\n",
  "Stryktipset": "# Stryktipset\n\n## Project Overview\n\nThis project is designed to demonstrate competency in constructing dynamic web applications with JavaScript and integrating them with external systems. The application fetches and displays football match data (Stryktips) from a fixed API for Fotbadskollen.se, a site that desires to offer its users the ability to view football betting tips.\n\n### Background\n\nFotbadskollen.se requested a JavaScript-based solution to integrate Stryktips data into their website. The site's design team has already developed the necessary HTML and CSS. The primary task was to implement JavaScript to fetch and display the Stryktips data correctly.\n\n## Features\n\n- **Dynamic Content Generation**: Football matches are dynamically generated and displayed on the page using JavaScript. Each match entry shows the teams that played and indicates the winner with a checkmark (1 X 2).\n- **Interactive Links**: Users can click on a football team's name to navigate to that team's official website.\n- **Data Fetching**: Stryktips data is fetched from the [provided API](https://stryk.herokuapp.com/strycket2022) using AJAX techniques to ensure that the API's format changes during the course do not affect the application.\n\n## Technologies Used\n\n- **JavaScript**: The entire functionality of fetching and displaying Stryktips data is handled through JavaScript without the use of external libraries.\n- **HTML/CSS**: Provided by the design team of Fotbadskollen.se and unmodified except for the addition of script tags to load JavaScript code.\n\n## Development\n\nThe solution involves:\n- **Modular JavaScript**: The project is structured into at least two ES6 modules, emphasizing the use of `import/export`\n- **DOM Manipulation**: JavaScript dynamically generates HTML elements (like table rows and data cells) that display the Stryktips data.\n- **AJAX**: Asynchronous JavaScript and XML are used for API communication, fetching data without needing to reload the webpage.\n\n## Setup\n\n1. Clone the repository.\n2. Open `index.html` in a modern web browser to view the project.\n\n## Additional Documentation\n\nA PDF document accompanies this project, answering detailed theoretical questions about DOM and AJAX as used in this application, providing insights into the deeper workings of web technologies within the context of this project.\n\n## Contribution\n\nThis project was developed as part of a course assignment and is meant for demonstration purposes only.\n",
  "The Process": "# Gym App (iOS)\n\nThis is a custom-built iOS gym tracking application created entirely for personal use. I wanted a training app that offered exactly the features I needed\u2014without compromise. So instead of trying to adapt to existing apps, I decided to build my own.\n\n## \ud83d\udcf1 Purpose\n\nThe goal of this project was to design an app that perfectly matches my own gym habits and preferences, with features I personally find essential when tracking workouts and progress.\n\n## \ud83c\udfa8 Design & Branding\n\nEvery aspect of the app\u2014from the logo to the user interface\u2014was designed by me. The visual identity is minimal, clean, and optimized for use in the gym.\n\n## \ud83e\uddf0 Built With\n\n- **Swift**\n- **UIKit**\n- **Xcode**\n- **Storyboard interface**\n- **Custom model-view-controller (MVC) structure**\n\n## \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Key Features\n\n- Intuitive workout tracking interface\n- Ability to customize exercises and sets\n- Option to add and manage workout templates\n- Real-time updates to workout sessions\n- Designed for ease of use during actual training\n\n## \ud83d\udea7 Project Status\n\nThis project is ongoing and evolving. As I continue to train and find new needs, I plan to implement more features and enhancements.\n\n## \ud83d\udcc1 Folder Structure\n\n- `The Process/`: Contains the source code and development files\n- `assets/`: UI mockups, custom icons, and logo (all designed by me)\n\n## \ud83e\udd1d Usage\n\nSince this app was built specifically for my personal workflow, it's not optimized for public release. However, feel free to explore the code if you're interested in building something similar.\n",
  "AI-Assistant": "# AI Project Assistant\n\n## Project Overview  \nThe AI Project Assistant is a private development project designed to support users in understanding the different software projects showcased on my portfolio website. It simulates an interactive assistant capable of answering natural language questions about specific projects.\n\nBy leveraging OpenAI's GPT-3.5-turbo model and a set of project descriptions, this assistant can provide helpful explanations, summaries, and clarifications to portfolio visitors in a professional and intuitive way.\n\n---\n\n## Learning Goals  \n- Explore how natural language interfaces can be integrated into a personal website  \n- Apply the OpenAI API in a real-world Flask-based application  \n- Enhance accessibility and engagement for portfolio content  \n- Design a modular and maintainable AI-based support tool  \n\n---\n\n## Background  \nAs part of my personal coding portfolio, I wanted to build an intelligent assistant that can answer questions about each project I\u2019ve developed. Instead of relying on static descriptions, this assistant uses the content of actual README files \u2014 embedded as context \u2014 and delivers context-aware responses via a simple chat interface.\n\nThe project also allowed me to experiment with integrating AI into real-time user interfaces and further my understanding of how to structure a conversational backend for educational or professional purposes.\n\n---\n\n## Project Details\n\n### Objective:  \nCreate a lightweight, web-based assistant that can intelligently answer questions about portfolio projects using OpenAI\u2019s language model and predefined project context.\n\n### Functionality:\n- User types a question (e.g. *\u201cWhat does the Electricity Price Analyzer do?\u201d*)  \n- A matching function identifies which project the question refers to  \n- The assistant loads that project\u2019s README content as context  \n- A structured prompt is sent to OpenAI's API  \n- The assistant formats and returns the answer as markdown-rendered text  \n\n---\n\n## Project Highlights\n\n- Uses a curated `project_readmes.json` file to provide detailed context  \n- Supports over 30 projects across Java, SQL, Python, .NET, Web Dev, and more  \n- Optimized prompt engineering for clarity and helpfulness  \n- Implements markdown rendering on the frontend for improved readability  \n- Contains a keyword-to-project matching system to identify relevant context  \n- Packaged with a clean and responsive user interface  \n\n---\n"
}